 public List<dynamic> UpdateEligibilityData(string filePath, int? divisionCode, string ipAddress, string username)
    {
        using var stream = new FileStream(filePath, FileMode.Open);
        using var workbook = new XLWorkbook(stream);
        var worksheet = workbook.Worksheet(1);
        var rows = worksheet.RangeUsed().RowsUsed().Skip(1);
        var newColumnNumber = worksheet.LastColumnUsed().ColumnNumber() + 1;
        worksheet.Cell(1, newColumnNumber).Value = "Status";


        var responseList = new List<dynamic>();

        foreach (var row in rows)
        {
            var eligible = new EligibleExcelModel
            {
                RefNo = row.Cell(1).Value.ToString(),
                AccountNo = row.Cell(2).Value.ToString(),
                IfscCode = row.Cell(3).Value.ToString(),
                OldEligibleForPension = row.Cell(4).Value.ToString(),
                NewEligibleForPension = row.Cell(5).Value.ToString(),
                Reason = row.Cell(6).Value.ToString()
            };

            int? refDivisionCode = dbContext.JkSwdeliveredMay30s.Where(u => u.RefNo == eligible.RefNo).FirstOrDefault()!.DivisionCode;
            string? status = "";
            int rowsAffected = 0;
            var refNo = new SqlParameter("@refNo", eligible.RefNo);
            var accountNo = new SqlParameter("@accountNo", eligible.AccountNo);
            var ifscCode = new SqlParameter("@ifscCode", eligible.IfscCode);
            var eligibleForPension = new SqlParameter("@NewEligibleForPension", eligible.NewEligibleForPension);
            var reason = new SqlParameter("@Reason", eligible.Reason);
            var divisionCodeParam = new SqlParameter("@divisionCode", divisionCode);


            if (divisionCode != 0 && divisionCode != refDivisionCode)
            {
                status = "Unauthorized to access this.";
            }
            else
            {
                var errorList = validation.ValidateUpdateEligibility(eligible);
                _logger.LogInformation($"ERROR : {errorList.Count}");
                if (errorList.Count != 0)
                {
                    status = "Falied to update because, " + string.Join(", ", errorList);
                }
                else
                {
                    rowsAffected = dbContext.Database.ExecuteSqlRaw("EXEC UpdateEligibility @refNo,@accountNo,@ifscCode,@NewEligibleForPension,@Reason,@divisionCode", refNo, accountNo, ifscCode, eligibleForPension, reason, divisionCodeParam);
                    status = "Updated Successfully.";

                    UpdateHistory(eligible.RefNo, eligible.OldEligibleForPension, eligible.NewEligibleForPension, ipAddress, username, "eligibleForPension", eligible.Reason, filePath);
                }

            }

            row.Cell(newColumnNumber).Value = status;
            responseList.Add(UpdatedData(eligible.RefNo, eligible.AccountNo, eligible.IfscCode, rowsAffected == 0 ? eligible.OldEligibleForPension : eligible.NewEligibleForPension, status, eligible.Reason));

        }
        workbook.SaveAs(stream);
        return responseList;
    }

    public List<dynamic> WeedoutCases(string filePath, int? divisionCode, string ipAddress, string username)
    {
        using var stream = new FileStream(filePath, FileMode.Open);
        using var workbook = new XLWorkbook(stream);
        var worksheet = workbook.Worksheet(1);
        var rows = worksheet.RangeUsed().RowsUsed().Skip(1);
        var newColumnNumber = worksheet.LastColumnUsed().ColumnNumber() + 1;
        worksheet.Cell(1, newColumnNumber).Value = "Status";


        var responseList = new List<dynamic>();

        foreach (var row in rows)
        {
            var weedout = new WeedoutExcelModel
            {
                RefNo = row.Cell(1).Value.ToString(),
                AccountNo = row.Cell(2).Value.ToString(),
                IfscCode = row.Cell(3).Value.ToString(),
                EligibleForPension = row.Cell(4).Value.ToString(),
                Reason = row.Cell(5).Value.ToString()
            };

            int? refDivisionCode = dbContext.JkSwdeliveredMay30s.Where(u => u.RefNo == weedout.RefNo).FirstOrDefault()!.DivisionCode;
            string? status = "";
            int rowsAffected = 0;
            var refNo = new SqlParameter("@refNo", weedout.RefNo);
            var accountNo = new SqlParameter("@accountNo", weedout.AccountNo);
            var ifscCode = new SqlParameter("@ifscCode", weedout.IfscCode);
            var eligibleForPension = new SqlParameter("@NewEligibleForPension", weedout.EligibleForPension);
            var reason = new SqlParameter("@Reason", weedout.Reason);
            var divisionCodeParam = new SqlParameter("@divisionCode", divisionCode);


            if (divisionCode != 0 && divisionCode != refDivisionCode)
            {
                status = "Unauthorized to access this.";
            }
            else
            {
                var errorList = validation.ValidateWeedoutCase(weedout);
                _logger.LogInformation($"ERROR : {errorList.Count}");
                if (errorList.Count != 0)
                {
                    status = "Falied to update because, " + string.Join(", ", errorList);
                }
                else
                {
                    rowsAffected = dbContext.Database.ExecuteSqlRaw("EXEC UpdateEligibility @refNo,@accountNo,@ifscCode,@NewEligibleForPension,@Reason,@divisionCode", refNo, accountNo, ifscCode, eligibleForPension, reason, divisionCodeParam);
                    status = "Updated Successfully.";

                    UpdateHistory(weedout.RefNo, "YES", weedout.EligibleForPension, ipAddress, username, "eligibleForPension", weedout.Reason, filePath);
                }

            }

            row.Cell(newColumnNumber).Value = status;
            responseList.Add(UpdatedData(weedout.RefNo, weedout.AccountNo, weedout.IfscCode, rowsAffected == 0 ? "YES" : weedout.EligibleForPension, status, weedout.Reason));

        }
        workbook.SaveAs(stream);
        return responseList;
    }

    public List<dynamic> UpdateAccountNumber(string filePath, int? divisionCode, string ipAddress, string username)
    {
        using var stream = new FileStream(filePath, FileMode.Open);
        using var workbook = new XLWorkbook(stream);
        var worksheet = workbook.Worksheet(1);
        var rows = worksheet.RangeUsed().RowsUsed().Skip(1);
        var newColumnNumber = worksheet.LastColumnUsed().ColumnNumber() + 1;
        worksheet.Cell(1, newColumnNumber).Value = "Status";

        var responseList = new List<dynamic>();

        foreach (var row in rows)
        {
            var account = new AccountNoExcelModel
            {
                RefNo = row.Cell(1).Value.ToString(),
                OldAccountNo = row.Cell(2).Value.ToString(),
                NewAccountNo = row.Cell(3).Value.ToString(),
                IfscCode = row.Cell(4).Value.ToString(),
                EligibleForPension = row.Cell(5).Value.ToString(),
                Reason = row.Cell(6).Value.ToString()
            };

            int? refDivisionCode = dbContext.JkSwdeliveredMay30s.Where(u => u.RefNo == account.RefNo).FirstOrDefault()!.DivisionCode;
            string? status = "";
            var refNo = new SqlParameter("@refNo", account.RefNo);
            var oldaccountNo = new SqlParameter("@OldAccountNo", account.OldAccountNo);
            var newaccoutNo = new SqlParameter("@NewAccountNo", account.NewAccountNo);
            var ifscCode = new SqlParameter("@ifscCode", account.IfscCode);
            var reason = new SqlParameter("@Reason", account.Reason);
            var divisionCodeParam = new SqlParameter("@divisionCode", divisionCode);
            int rowsAffected = 0;

            if (divisionCode != 0 && divisionCode != refDivisionCode)
            {
                status = "Unauthorized to access this.";
            }
            else
            {
                var errorList = validation.ValidateUpdateAccountNo(account);

                if (errorList.Count != 0)
                {
                    status = "Falied to update because, " + string.Join(", ", errorList);
                }
                else
                {
                    rowsAffected = dbContext.Database.ExecuteSqlRaw("EXEC UpdateAccountNo @refNo,@OldAccountNo,@NewAccountNo,@ifscCode,@Reason,@divisionCode", refNo, oldaccountNo, newaccoutNo, ifscCode, reason, divisionCodeParam);
                    status = "Updated Successfully.";

                    UpdateHistory(account.RefNo, account.OldAccountNo, account.NewAccountNo, ipAddress, username, "accountNo", account.Reason!, filePath);
                }
            }

            row.Cell(newColumnNumber).Value = status;


            responseList.Add(UpdatedData(account.RefNo, rowsAffected == 0 ? account.OldAccountNo : account.NewAccountNo, account.IfscCode, account.EligibleForPension, status, account.Reason!));


        }
        workbook.SaveAs(stream);
        return responseList;
    }

    public List<dynamic> UpdateIfscCode(string filePath, int? divisionCode, string ipAddress, string username)
    {
        using var stream = new FileStream(filePath, FileMode.Open);
        using var workbook = new XLWorkbook(stream);
        var worksheet = workbook.Worksheet(1);
        var rows = worksheet.RangeUsed().RowsUsed().Skip(1);
        var newColumnNumber = worksheet.LastColumnUsed().ColumnNumber() + 1;
        worksheet.Cell(1, newColumnNumber).Value = "Status";
        var responseList = new List<dynamic>();

        foreach (var row in rows)
        {
            var ifsc = new IfscExcelModel
            {
                RefNo = row.Cell(1).Value.ToString(),
                AccountNo = row.Cell(2).Value.ToString(),
                OldIfscCode = row.Cell(3).Value.ToString(),
                NewIfscCode = row.Cell(4).Value.ToString(),
                EligibleForPension = row.Cell(5).Value.ToString(),
                Reason = row.Cell(6).Value.ToString()
            };

            int? refDivisionCode = dbContext.JkSwdeliveredMay30s.Where(u => u.RefNo == ifsc.RefNo).FirstOrDefault()!.DivisionCode;
            string? status = "";
            var refNo = new SqlParameter("@refNo", ifsc.RefNo);
            var accountNo = new SqlParameter("@AccountNo", ifsc.AccountNo);
            var oldifsc = new SqlParameter("@OldIfsc", ifsc.OldIfscCode);
            var newifsc = new SqlParameter("@NewIfsc", ifsc.NewIfscCode);
            var reason = new SqlParameter("@Reason", ifsc.Reason);
            var divisionCodeParam = new SqlParameter("@divisionCode", divisionCode);
            int rowsAffected = 0;

            if (divisionCode != 0 && divisionCode != refDivisionCode)
            {
                status = "Unauthorized to access this.";
            }
            else
            {
                var errorList = validation.ValidateUpdateIfscCode(ifsc);

                if (errorList.Count != 0)
                {
                    status = "Falied to update because, " + string.Join(", ", errorList);
                }
                else
                {
                    rowsAffected = dbContext.Database.ExecuteSqlRaw("EXEC UpdateIfscCode @refNo,@AccountNo,@OldIfsc,@NewIfsc,@Reason,@divisionCode", refNo, accountNo, oldifsc, newifsc, reason, divisionCodeParam);

                    UpdateHistory(ifsc.RefNo, ifsc.OldIfscCode, ifsc.NewIfscCode, ipAddress, username, "ifscCode", ifsc.Reason!, filePath);
                    status = "Updated Successfully.";
                }
            }


            row.Cell(newColumnNumber).Value = status;
            responseList.Add(UpdatedData(ifsc.RefNo, ifsc.AccountNo, rowsAffected == 0 ? ifsc.OldIfscCode : ifsc.NewIfscCode, ifsc.EligibleForPension, status, ifsc.Reason!));


        }
        workbook.SaveAs(stream);
        return responseList;
    }

    public List<dynamic> UpdateApplicantName(string filePath, int? divisionCode, string ipAddress, string username)
    {
        using var stream = new FileStream(filePath, FileMode.Open);
        using var workbook = new XLWorkbook(stream);
        var worksheet = workbook.Worksheet(1);
        var rows = worksheet.RangeUsed().RowsUsed().Skip(1);
        var newColumnNumber = worksheet.LastColumnUsed().ColumnNumber() + 1;
        worksheet.Cell(1, newColumnNumber).Value = "Status";
        var responseList = new List<dynamic>();

        foreach (var row in rows)
        {
            var applicant = new NameExcelModel
            {
                RefNo = row.Cell(1).Value.ToString(),
                AccountNo = row.Cell(2).Value.ToString(),
                IfscCode = row.Cell(3).Value.ToString(),
                OldName = row.Cell(4).Value.ToString(),
                NewName = row.Cell(5).Value.ToString(),
                EligibleForPension = row.Cell(6).Value.ToString(),
                Reason = row.Cell(7).Value.ToString()
            };

            int? refDivisionCode = dbContext.JkSwdeliveredMay30s.Where(u => u.RefNo == applicant.RefNo).FirstOrDefault()!.DivisionCode;
            string? status = "";
            var refNo = new SqlParameter("@refNo", applicant.RefNo);
            var accountNo = new SqlParameter("@AccountNo", applicant.AccountNo);
            var ifsc = new SqlParameter("@IfscCode", applicant.IfscCode);
            var oldname = new SqlParameter("@OldName", applicant.OldName);
            var newname = new SqlParameter("@NewName", applicant.NewName);
            var reason = new SqlParameter("@Reason", applicant.Reason);
            var divisionCodeParam = new SqlParameter("@divisionCode", divisionCode);
            int rowsAffected = 0;

            if (divisionCode != 0 && divisionCode != refDivisionCode)
            {
                status = "Unauthorized to access this.";
            }
            else
            {
                var errorList = validation.ValidateUpdateApplicantName(applicant);

                if (errorList.Count != 0)
                {
                    status = "Falied to update because, " + string.Join(", ", errorList);
                }
                else
                {
                    status = "Updated Successfully.";
                    rowsAffected = dbContext.Database.ExecuteSqlRaw("EXEC UpdateApplicantName @refNo,@AccountNo,@IfscCode,@OldName,@NewName,@Reason,@divisionCode", refNo, accountNo, ifsc, oldname, newname, reason, divisionCodeParam);
                    UpdateHistory(applicant.RefNo, applicant.OldName, applicant.NewName, ipAddress, username, "applicantName", applicant.Reason!, filePath);
                }
            }




            row.Cell(newColumnNumber).Value = status;

            var updatedData = new
            {
                RefrenceNumber = applicant.RefNo,
                applicant = applicant.NewName,
                AccountNumber = applicant.AccountNo.PadLeft(16, '0'),
                IfscCode = applicant.IfscCode,
                EligibleForPension = applicant.EligibleForPension,
                Status = status,
            };
            responseList.Add(updatedData);

        }
        workbook.SaveAs(stream);
        return responseList;
    }




<form id="updateForm">
    <div class="text-dark vh-100 d-flex flex-column align-items-center justify-content-center">
        <div class="container d-flex flex-column justify-content-center gap-3 shadow-lg p-3 rounded">
            <p class="fs-1 fw-bold text-center">Update Multiple Records</p>

            <div class="d-flex flex-column align-items-center justify-content-center gap-3">
                <label for="excelColumn" class="fs-6 fw-bold">Column to update</label>
                <select class="form-select w-50 rounded-pill" name="excelColumn" id="excelColumn">
                    <option value="">Please Select</option>
                    <option value="applicantName">Applicant Name</option>
                    <option value="eligibleForPension">Eligible For Pension</option>
                    <option value="accountNo">Account Number</option>
                    <option value="ifscCode">IFSC Code</option>
                    <option value="weedout">Weedout Cases</option>
                </select>

            </div>

            <div id="form">

            </div>

        </div>
        <div class="container mt-3">
            <div style="overflow-x: auto;">
                <table class="table table-light table-striped table-bordered">
                    <tbody id="response">

                    </tbody>
                </table>
            </div>

        </div>
    </div>
</form>



dotnet ef dbcontext scaffold "name=DefaultConnection" Microsoft.EntityFrameworkCore.SqlServer --output-dir Models/Entities --force